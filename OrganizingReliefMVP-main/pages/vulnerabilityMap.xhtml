<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>GeoJSON on Google Maps</title>
    <script
      src="https://maps.googleapis.com/maps/api/js?key={$API_KEY}&amp;callback=initMap&amp;libraries=maps,visualization,places"
      async="async"
      defer="defer"
    ></script>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/chroma-js/2.1.0/chroma.min.js"
      type="text/javascript"
    ></script>
    <style type="text/css">
      #map {
        height: 90%;
      }

      html,
      body {
        height: 100%;
        margin: 65px 0 0 0;
        padding: 0;
        font-family: Poppins, sans-serif;
      }

      h1 {
        font-weight: 600;
        font-size: 24pt;
        color: white;
        text-align: center;
      }
      input[type="text"] {
        width: calc(25% - 20px);
        padding: 10px;
        margin-bottom: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        font-size: 10pt;
      }

      input[type="select"] {
        width: calc(100% - 20px);
      }

      input[type="submit"] {
        width: calc(100% - 20px);
        padding: 10px;
        background-color: #809bce;
        color: #fff;
        border: none;
        border-radius: 5px;
        cursor: pointer;
      }

      input[type="submit"]:hover {
        background-color: #3185fc;
      }

      header {
        background-color: #00205b;
        color: white;
        padding: 15px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        position: fixed;
        width: 100%;
        top: 0;
        z-index: 1000;
        border-bottom-left-radius: 20px;
        border-bottom-right-radius: 20px;
        box-shadow: 0 -6px 10px 5px rgba(0, 0, 0, 0.5);
      }

      nav {
        padding: 10px 20px;
        text-align: center;
      }

      nav a {
        color: white;
        margin: 0 10px;
        text-decoration: none;
      }

      nav a:hover {
        color: #809bce;
        /* Light blue on hover */
      }
    </style>
  </head>

  <body>
    <header>
      <h1>Emergency Call</h1>
      <nav>
        <a
          href="${tg.url('/citizenHomePage') if isCitizen else tg.url('/providerHomePage')}"
          >Home</a
        >
        <a href="${tg.url('/')}">Sign Out</a>
      </nav>
    </header>
    <input
      type="text"
      id="searchInput"
      placeholder="Enter a Puerto Rican municipality"
    />
    <button id="searchButton" onclick="search()">Search</button>
    <div id="searchResults"></div>
    <br /><br />

    <div id="myElement" data-my-variable="someValue"></div>

    <div id="map"></div>
    <div id="zipCodes" data-zip-codes="${zip_codes}"></div>
    <div id="urgencyRatings" data-urgency="${urgency_ratings}"></div>
    <div id="aidHubs" data-aid-hubs="${aid_hubs}"></div>

    <script type="text/javascript">
      // <![CDATA[
      var isCitizen = "${isCitizen}";
      var municipalities = "${municipalityList}";
      municipalities = JSON.parse(municipalities.replace(/'/g, '"'));

      function filterMunicipalities(searchTerm) {
        const filteredMunicipalities = municipalities
          .filter((municipality) =>
            municipality.toLowerCase().startsWith(searchTerm.toLowerCase())
          )
          .slice(0, 4); // Display top four matches

        return filteredMunicipalities;
      }

      function displayDropdown(filteredMunicipalities) {
        const dropdownContainer = document.getElementById("searchResults");
        dropdownContainer.innerHTML = "";

        if (filteredMunicipalities.length === 0) {
          dropdownContainer.innerHTML = "No matching municipalities found.";
          return;
        }

        filteredMunicipalities.forEach((municipality) => {
          const relatedMunicipality = document.createElement("button");
          relatedMunicipality.className = "relatedMunicipality";
          relatedMunicipality.innerText = municipality;
          relatedMunicipality.addEventListener("click", function () {
            document.getElementById("searchInput").value = municipality;
          });
          dropdownContainer.appendChild(relatedMunicipality);
        });
      }

      function search() {
        const searchTerm = document.getElementById("searchInput").value;
        const xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function () {
          if (xhr.readyState === XMLHttpRequest.DONE) {
            if (xhr.status === 200) {
              const response = JSON.parse(xhr.responseText);
              if (response.valid) {
                if (isCitizen == "True") {
                  window.location.href =
                    "${tg.url('/municipalityHubs/')}" + searchTerm;
                } else {
                  console.log("SHHH");
                  window.location.href =
                    "${tg.url('/municipalityCalls/')}" + searchTerm;
                }
              }
            }
          }
        };
        xhr.open(
          "GET",
          "${tg.url('/search', params={'searchTerm': ''})}" + searchTerm
        );
        xhr.send();
      }

      document
        .getElementById("searchInput")
        .addEventListener("input", function () {
          const searchTerm = this.value;
          const filteredMunicipalities = filterMunicipalities(searchTerm);

          // Display the related municipalities below the textbox
          displayDropdown(filteredMunicipalities);
        });

      var map;
      var muncipalityVulnerability;
      function removeAccents(str) {
        // Convert accented characters to their non-accented counterparts
        return str.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
      }

      function initMap() {
        map = new google.maps.Map(document.getElementById("map"), {
          center: { lat: 18.251983642578125, lng: -66.60456848144531 },
          zoom: 9.5,
        });

        map.data.loadGeoJson("http://localhost:8080/get_geojson");

        map.data.setStyle(function (feature) {
          var vulnerabilityIndex = feature.getProperty("VULNERABILITY");
          var color = getColorBasedOnIndex(vulnerabilityIndex);

          return {
            fillColor: color,
            strokeWeight: 1,
          };
        });

        map.data.addListener("click", function (event) {
          var vulnerabilityIndex = event.feature.getProperty("VULNERABILITY");
          var muncipality = event.feature.getProperty("NAME");
          muncipality = removeAccents(muncipality);
          console.log("monte", muncipality);
          console.log(muncipality);
          var urgencyRatingIndex;
          var rating;
          var url;
          var ratingString = document
            .getElementById("urgencyRatings")
            .getAttribute("data-urgency");
          var ratings = JSON.parse(ratingString);
          for (let i = 0; i < ratings.length; i++) {
            if (ratings[i][0] == muncipality) {
              urgencyRatingIndex = ratings[i][1];
            }
          }

          var muncipality_str = muncipality;

          if (muncipality.indexOf(" ") >= 0) {
            var muncipality_list = muncipality.split(" ");
            var muncipality_str = "";
            muncipality_str += muncipality_list[0];
            muncipality_str += "%20";
            muncipality_str += muncipality_list[1];
          } else {
            muncipality_str = muncipality;
          }

          if (isCitizen == "True") {
            url = "${tg.url('/municipalityHubs/')}" + muncipality_str;
          } else {
            console.log("SHHH");
            url = "${tg.url('/municipalityCalls/')}" + muncipality_str;
          }

          muncipalityVulnerability =
            0.2 * urgencyRatingIndex + 0.8 * vulnerabilityIndex;
          var content = "<div class='muncipalityBox'>";
          content += "<h2>" + muncipality + "</h2>";

          content +=
            "<p> <a href=" +
            url +
            ">" +
            muncipality +
            "'s" +
            " Home Page" +
            "</a> </p>";

          content +=
            "<p> <b> Vulnerability Index: </b>" + vulnerabilityIndex.toFixed(4);
          content +=
            "<br><br>" + "<b>Urgency Rating: </b>" + urgencyRatingIndex;
          content +=
            "<br><br>" +
            "<b> Muncipality Vulnerability: </b>" +
            muncipalityVulnerability.toFixed(4) +
            "<br><br>";
          content += "</div>";

          showTooltip(event.latLng, content);
        });

        map.addListener("click", function () {
          hideTooltip();
        });

        var aidHubs;
        var aidHubsString = document
          .getElementById("aidHubs")
          .getAttribute("data-aid-hubs");
        aidHubs = JSON.parse(aidHubsString);

        for (let i = 0; i < aidHubs.length; i++) {
          (function (index) {
            console.log(aidHubs[i]);
            var [
              mainProvider,
              muncipality,
              zipcode,
              city,
              streetAddr,
              aidDescription,
              currCapacity,
            ] = aidHubs[i];

            console.log(mainProvider);
            if (currCapacity == 1) {
              currCapacity = "Under Capacity";
            } else if (currCapacity == 2) {
              currCapacity = "Maximum Capacity";
            } else if (currCapacity == 3) {
              currCapacity = "Over Capacity";
            }
            geocodeZipCode(zipcode, function (lat, lng) {
              console.log(typeof zipcode);
              if (lat !== null && lng !== null) {
                var content = "<div class='muncipalityBox'>";
                content += "<h2>" + mainProvider + "</h2>" + "<p>";
                content +=
                  "<br><br>" +
                  streetAddr +
                  ", " +
                  zipcode +
                  ", " +
                  city +
                  "<br><br>" +
                  "Current Capacity: " +
                  currCapacity;
                content += "<br><br>" + aidDescription + "<br>" + "</p>";
                content += "</div>";

                addMarkerToMap({ lat: lat, lng: lng }, content);
              }
            });
          })(i);
        }
        map.addListener("click", function () {
          hideTooltip();
        });
      }

      var x = document.getElementById("location-info");

      function getLocation() {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(showPosition);
        } else {
          x.innerHTML = "Geolocation is not supported by this browser.";
        }
      }

      function showPosition(position) {
        x.innerHTML =
          "Latitude: " +
          position.coords.latitude +
          "<br>Longitude: " +
          position.coords.longitude;
      }

      function addMarkerToMap(position, data) {
        var marker = new google.maps.Marker({
          position: position,
          map: map,
        });

        var infowindow = new google.maps.InfoWindow({
          content: data,
          maxWidth: 300,
        });

        marker.addListener("click", function () {
          infowindow.open(map, marker);
        });
      }

      function getColorBasedOnIndex(index) {
        var colorScale = chroma
          .scale(["yellow", "red"])
          .domain([0, 0.2, 0.4, 0.6, 0.8, 1]);
        return colorScale(index).hex();
      }

      function showTooltip(latLng, content) {
        var tooltip = new google.maps.InfoWindow({
          position: latLng,
          content: content,
        });
        tooltip.open(map);
      }

      function hideTooltip() {
        var tooltip = new google.maps.InfoWindow();
        tooltip.close();
      }

      function geocodeZipCode(zipCode, callback) {
        var geocoder = new google.maps.Geocoder();

        var address = zipCode;

        geocoder.geocode({ address: address }, function (results, status) {
          if (status === google.maps.GeocoderStatus.OK) {
            var lat = results[0].geometry.location.lat();
            var lng = results[0].geometry.location.lng();

            console.log("Latitude:", lat);
            console.log("Longitude:", lng);
            callback(lat, lng);
          } else {
            console.error(
              "Geocode was not successful for the following reason:",
              status
            );
            callback(null, null);
          }
        });
      }

      // ]]>
    </script>
  </body>
</html>
